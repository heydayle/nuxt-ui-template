/**
 * Generated by orval v6.28.2 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  faker,
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http,
} from 'msw'
import type {
  AppResponseGetChapterDetailRes,
  AppResponseObject,
} from '../../models'

export const getRenameComicOrChapterResponseMock = (overrideResponse: any = {}): AppResponseObject => ({ DATA: faker.helpers.arrayElement([{}, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getGetListChapterResponseMock = (overrideResponse: any = {}): AppResponseObject => ({ DATA: faker.helpers.arrayElement([{}, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getGetChapterDetailResponseMock = (overrideResponse: any = {}): AppResponseGetChapterDetailRes => ({ DATA: faker.helpers.arrayElement([{ CHAPTER_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), COMIC_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), COMIC_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), CRAWLER_DATA: faker.helpers.arrayElement([{}, undefined]), CREATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), LIST_LANG: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ LANG: faker.helpers.arrayElement([faker.word.sample(), undefined]), LANG_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), TEXT_NUMBER: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse })), undefined]), SITE: faker.helpers.arrayElement([faker.word.sample(), undefined]), TRANSLATED: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ CREATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), FILE_ZIP: faker.helpers.arrayElement([faker.word.sample(), undefined]), FILES: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ CREATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), FILE_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), URL: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })), undefined]), IMAGES: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ CREATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), IMG_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IMG_NO: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), JSON: faker.helpers.arrayElement([{}, undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), URL: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })), undefined]), JSON: faker.helpers.arrayElement([faker.word.sample(), undefined]), LANG: faker.helpers.arrayElement([faker.word.sample(), undefined]), LANG_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ORIGINAL: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), TEXT_NUM: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse }, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getCreateUpdateChapterResponseMock = (overrideResponse: any = {}): AppResponseObject => ({ DATA: faker.helpers.arrayElement([{}, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getDeleteChaptersResponseMock = (overrideResponse: any = {}): AppResponseObject => ({ DATA: faker.helpers.arrayElement([{}, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export function getRenameComicOrChapterMockHandler(overrideResponse?: AppResponseObject) {
  return http.post('*/api/work/RENAME_COMIC_OR_CHAPTER', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getRenameComicOrChapterResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getGetListChapterMockHandler(overrideResponse?: AppResponseObject) {
  return http.post('*/api/work/GET_LIST_CHAPTER', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getGetListChapterResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getGetChapterDetailMockHandler(overrideResponse?: AppResponseGetChapterDetailRes) {
  return http.post('*/api/work/GET_CHAPTER_DETAIL', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getGetChapterDetailResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getCreateUpdateChapterMockHandler(overrideResponse?: AppResponseObject) {
  return http.post('*/api/work/CREATE_UPDATE_CHAPTER', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getCreateUpdateChapterResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getCreateManualLogMockHandler() {
  return http.post('*/api/work/CREATE_MANUAL_LOG', async () => {
    await delay(1000)
    return new HttpResponse(null, {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getDeleteChaptersMockHandler(overrideResponse?: AppResponseObject) {
  return http.delete('*/api/work/DELETE_LIST_CHAPTER', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getDeleteChaptersResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}
export function getChapterControllerMock() {
  return [
    getRenameComicOrChapterMockHandler(),
    getGetListChapterMockHandler(),
    getGetChapterDetailMockHandler(),
    getCreateUpdateChapterMockHandler(),
    getCreateManualLogMockHandler(),
    getDeleteChaptersMockHandler(),
  ]
}
