/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useMutation,
} from '@tanstack/vue-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationReturnType,
} from '@tanstack/vue-query'
import { customInstance } from '../../mutator/custom-instance'
import type { ErrorType } from '../../mutator/custom-instance'

type AwaitedInput<T> = PromiseLike<T> | T

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

export function reject() {
  return customInstance<string>(
    { url: `/api-v1/work/kratos/webhook/reject`, method: 'POST',
    },
  )
}

export function getRejectMutationOptions<TError = ErrorType<unknown>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof reject>>, TError, void, TContext> }): UseMutationOptions<Awaited<ReturnType<typeof reject>>, TError, void, TContext> {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof reject>>, void> = () => {
    return reject()
  }

  return { mutationFn, ...mutationOptions }
}

export type RejectMutationResult = NonNullable<Awaited<ReturnType<typeof reject>>>

export type RejectMutationError = ErrorType<unknown>

export function useReject<TError = ErrorType<unknown>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof reject>>, TError, void, TContext> }): UseMutationReturnType<
        Awaited<ReturnType<typeof reject>>,
        TError,
        void,
        TContext
      > {
  const mutationOptions = getRejectMutationOptions(options)

  return useMutation(mutationOptions)
}
export function afterLogin() {
  return customInstance<string>(
    { url: `/api-v1/work/kratos/webhook/logging-identity`, method: 'POST',
    },
  )
}

export function getAfterLoginMutationOptions<TError = ErrorType<unknown>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof afterLogin>>, TError, void, TContext> }): UseMutationOptions<Awaited<ReturnType<typeof afterLogin>>, TError, void, TContext> {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof afterLogin>>, void> = () => {
    return afterLogin()
  }

  return { mutationFn, ...mutationOptions }
}

export type AfterLoginMutationResult = NonNullable<Awaited<ReturnType<typeof afterLogin>>>

export type AfterLoginMutationError = ErrorType<unknown>

export function useAfterLogin<TError = ErrorType<unknown>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof afterLogin>>, TError, void, TContext> }): UseMutationReturnType<
        Awaited<ReturnType<typeof afterLogin>>,
        TError,
        void,
        TContext
      > {
  const mutationOptions = getAfterLoginMutationOptions(options)

  return useMutation(mutationOptions)
}
