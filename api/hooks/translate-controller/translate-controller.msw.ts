/**
 * Generated by orval v6.28.2 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  faker,
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http,
} from 'msw'
import type {
  AppResponseListLocaleRes,
  AppResponseListTargetLocale,
  AppResponseListTranslateEngineEntity,
  AppResponseObject,
  AppResponseTranslatePtsRes,
  AppResponseTranslateRes,
} from '../../models'

export const getTranslateResponseMock = (overrideResponse: any = {}): AppResponseTranslateRes => ({ DATA: faker.helpers.arrayElement([{ SOURCE_LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), TARGET_LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), TRANSLATED_TEXT_LIST: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ ORIGINAL_TEXT_BOX_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), TRANSLATED_TEXT: faker.helpers.arrayElement([faker.word.sample(), undefined]), TRANSLATED_TEXT_BOX_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse })), undefined]), ...overrideResponse }, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getTranslateTextBoxesResponseMock = (overrideResponse: any = {}): AppResponseObject => ({ DATA: faker.helpers.arrayElement([{}, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getTranslatePtsResponseMock = (overrideResponse: any = {}): AppResponseTranslatePtsRes => ({ DATA: faker.helpers.arrayElement([{ SOURCE_LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), TARGET_LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), TRANSLATED_TEXT_LIST: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ ORIGINAL_TEXT: faker.helpers.arrayElement([faker.word.sample(), undefined]), TRANSLATED_TEXT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })), undefined]), ...overrideResponse }, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getGetTranslateLocaleListResponseMock = (overrideResponse: any = {}): AppResponseListTargetLocale => ({ DATA: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), DEFAULT: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ISO2: faker.helpers.arrayElement([faker.word.sample(), undefined]), NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), TRANSLATE_ENGINE_CODE: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse })), undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getGetTranslateLocaleListForPtsResponseMock = (overrideResponse: any = {}): AppResponseListTargetLocale => ({ DATA: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), DEFAULT: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ISO2: faker.helpers.arrayElement([faker.word.sample(), undefined]), NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), TRANSLATE_ENGINE_CODE: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse })), undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getGetSourceLocaleResponseMock = (overrideResponse: any = {}): AppResponseListLocaleRes => ({ DATA: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ISO2: faker.helpers.arrayElement([faker.word.sample(), undefined]), NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })), undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getGetLocaleListResponseMock = (overrideResponse: any = {}): AppResponseListLocaleRes => ({ DATA: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ISO2: faker.helpers.arrayElement([faker.word.sample(), undefined]), NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })), undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getLocaleFilterResponseMock = (overrideResponse: any = {}): AppResponseListLocaleRes => ({ DATA: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ISO2: faker.helpers.arrayElement([faker.word.sample(), undefined]), NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })), undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getGetEngineListResponseMock = (overrideResponse: any = {}): AppResponseListTranslateEngineEntity => ({ DATA: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ CODE: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), CREATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })), undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getComicTranslateLocaleResponseMock = (overrideResponse: any = {}): AppResponseListLocaleRes => ({ DATA: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ISO2: faker.helpers.arrayElement([faker.word.sample(), undefined]), NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })), undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export function getTranslateMockHandler(overrideResponse?: AppResponseTranslateRes) {
  return http.post('*/api-v2/work/translate', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getTranslateResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getTranslateTextBoxesMockHandler(overrideResponse?: AppResponseObject) {
  return http.post('*/api-v2/work/translate/translate-textboxes', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getTranslateTextBoxesResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getTranslatePtsMockHandler(overrideResponse?: AppResponseTranslatePtsRes) {
  return http.post('*/api-v2/work/translate/translate-pts', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getTranslatePtsResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getGetTranslateLocaleListMockHandler(overrideResponse?: AppResponseListTargetLocale) {
  return http.get('*/api-v2/work/translate/target-locales', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getGetTranslateLocaleListResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getGetTranslateLocaleListForPtsMockHandler(overrideResponse?: AppResponseListTargetLocale) {
  return http.get('*/api-v2/work/translate/target-locales-pts', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getGetTranslateLocaleListForPtsResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getGetSourceLocaleMockHandler(overrideResponse?: AppResponseListLocaleRes) {
  return http.get('*/api-v2/work/translate/source-locales', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getGetSourceLocaleResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getGetLocaleListMockHandler(overrideResponse?: AppResponseListLocaleRes) {
  return http.get('*/api-v2/work/translate/locales', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getGetLocaleListResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getLocaleFilterMockHandler(overrideResponse?: AppResponseListLocaleRes) {
  return http.get('*/api-v2/work/translate/locale-filter', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getLocaleFilterResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getGetEngineListMockHandler(overrideResponse?: AppResponseListTranslateEngineEntity) {
  return http.get('*/api-v2/work/translate/engines', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getGetEngineListResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getComicTranslateLocaleMockHandler(overrideResponse?: AppResponseListLocaleRes) {
  return http.get('*/api-v2/work/translate/comic-translate-locale', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getComicTranslateLocaleResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}
export function getTranslateControllerMock() {
  return [
    getTranslateMockHandler(),
    getTranslateTextBoxesMockHandler(),
    getTranslatePtsMockHandler(),
    getGetTranslateLocaleListMockHandler(),
    getGetTranslateLocaleListForPtsMockHandler(),
    getGetSourceLocaleMockHandler(),
    getGetLocaleListMockHandler(),
    getLocaleFilterMockHandler(),
    getGetEngineListMockHandler(),
    getComicTranslateLocaleMockHandler(),
  ]
}
