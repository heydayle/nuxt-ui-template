/**
 * Generated by orval v6.28.2 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  faker,
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http,
} from 'msw'
import type {
  AppResponseListSiteEntity,
  AppResponseOptionalSiteEntity,
} from '../../models'

export const getGetAllSiteResponseMock = (overrideResponse: any = {}): AppResponseListSiteEntity => ({ DATA: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ COMICS: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ CHAPTERS: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ BRING_CHAPTER: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), CHAPTER_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), CHAPTER_SITE_ID: faker.helpers.arrayElement([faker.word.sample(), undefined]), CRAWLER_DATA: faker.helpers.arrayElement([{}, undefined]), CREATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), DEFAULT_TRANSLATED_LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), DRAFT: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), FORCE_RESIZE_IMAGE: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), FROM_SITE: faker.helpers.arrayElement([faker.word.sample(), undefined]), GETTING_TYPE_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IMAGES: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ BUCKET_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), CREATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), DISABLED: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), HEIGHT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IMAGE_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), IMAGE_ORDER: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IMG_NO: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IS_MIGRATE_IMAGE: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), JSON: faker.helpers.arrayElement([{}, undefined]), LANGUAGE: faker.helpers.arrayElement([{ CHAPTER_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), CREATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IMAGES: faker.helpers.arrayElement([[], undefined]), IS_ORIGINAL: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), LOCALE: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_NUMBER: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse }, undefined]), PREVENT_UPDATED_AT: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), REGION: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESIZED_URL: faker.helpers.arrayElement([faker.word.sample(), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), URL: faker.helpers.arrayElement([faker.word.sample(), undefined]), WIDTH: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse })), undefined]), IMPORTED_EXCEL_COUNT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IS_MIGRATE: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), IS_VISION_FINISHED: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), LANGUAGES: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ CHAPTER_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), CREATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IMAGES: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ BUCKET_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), CREATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), DISABLED: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), HEIGHT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IMAGE_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), IMAGE_ORDER: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IMG_NO: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IS_MIGRATE_IMAGE: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), JSON: faker.helpers.arrayElement([{}, undefined]), PREVENT_UPDATED_AT: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), REGION: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESIZED_URL: faker.helpers.arrayElement([faker.word.sample(), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), URL: faker.helpers.arrayElement([faker.word.sample(), undefined]), WIDTH: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse })), undefined]), IS_ORIGINAL: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), LOCALE: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_NUMBER: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })), undefined]), NEW_API: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), OCR_PERMISSION: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ORIGINAL_LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), OWNER: faker.helpers.arrayElement([faker.word.sample(), undefined]), STATUS: faker.helpers.arrayElement([faker.word.sample(), undefined]), TRANSLATE_PERMISSION: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), TRANSLATED: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), TRANSLATED_COUNT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), UPLOAD: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), VISION_END_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), VISION_START_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ZIP_URL: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })), undefined]), COMIC_SITE_ID: faker.helpers.arrayElement([faker.word.sample(), undefined]), CREATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), EMAIL_OWNER: faker.helpers.arrayElement([faker.word.sample(), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), KRATOS_IDENTITY_BINDING_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), PREVENT_UPDATE_TIME: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), USER_GROUP_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse })), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), URL: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })), undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getGetOneSiteResponseMock = (overrideResponse: any = {}): AppResponseOptionalSiteEntity => ({ DATA: faker.helpers.arrayElement([{ COMICS: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ CHAPTERS: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ BRING_CHAPTER: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), CHAPTER_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), CHAPTER_SITE_ID: faker.helpers.arrayElement([faker.word.sample(), undefined]), CRAWLER_DATA: faker.helpers.arrayElement([{}, undefined]), CREATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), DEFAULT_TRANSLATED_LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), DRAFT: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), FORCE_RESIZE_IMAGE: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), FROM_SITE: faker.helpers.arrayElement([faker.word.sample(), undefined]), GETTING_TYPE_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IMAGES: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ BUCKET_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), CREATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), DISABLED: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), HEIGHT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IMAGE_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), IMAGE_ORDER: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IMG_NO: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IS_MIGRATE_IMAGE: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), JSON: faker.helpers.arrayElement([{}, undefined]), LANGUAGE: faker.helpers.arrayElement([{ CHAPTER_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), CREATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IMAGES: faker.helpers.arrayElement([[], undefined]), IS_ORIGINAL: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), LOCALE: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_NUMBER: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse }, undefined]), PREVENT_UPDATED_AT: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), REGION: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESIZED_URL: faker.helpers.arrayElement([faker.word.sample(), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), URL: faker.helpers.arrayElement([faker.word.sample(), undefined]), WIDTH: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse })), undefined]), IMPORTED_EXCEL_COUNT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IS_MIGRATE: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), IS_VISION_FINISHED: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), LANGUAGES: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ CHAPTER_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), CREATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IMAGES: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ BUCKET_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), CREATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), DISABLED: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), HEIGHT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IMAGE_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), IMAGE_ORDER: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IMG_NO: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IS_MIGRATE_IMAGE: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), JSON: faker.helpers.arrayElement([{}, undefined]), PREVENT_UPDATED_AT: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), REGION: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESIZED_URL: faker.helpers.arrayElement([faker.word.sample(), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), URL: faker.helpers.arrayElement([faker.word.sample(), undefined]), WIDTH: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse })), undefined]), IS_ORIGINAL: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), LOCALE: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_NUMBER: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })), undefined]), NEW_API: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), OCR_PERMISSION: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ORIGINAL_LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), OWNER: faker.helpers.arrayElement([faker.word.sample(), undefined]), STATUS: faker.helpers.arrayElement([faker.word.sample(), undefined]), TRANSLATE_PERMISSION: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), TRANSLATED: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), TRANSLATED_COUNT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), UPLOAD: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), VISION_END_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), VISION_START_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ZIP_URL: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })), undefined]), COMIC_SITE_ID: faker.helpers.arrayElement([faker.word.sample(), undefined]), CREATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), EMAIL_OWNER: faker.helpers.arrayElement([faker.word.sample(), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), KRATOS_IDENTITY_BINDING_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), PREVENT_UPDATE_TIME: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), USER_GROUP_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse })), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), URL: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse }, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export function getGetAllSiteMockHandler(overrideResponse?: AppResponseListSiteEntity) {
  return http.get('*/api-v2/work/site', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getGetAllSiteResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getGetOneSiteMockHandler(overrideResponse?: AppResponseOptionalSiteEntity) {
  return http.get('*/api-v2/work/site/:id', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getGetOneSiteResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}
export function getSiteControllerMock() {
  return [
    getGetAllSiteMockHandler(),
    getGetOneSiteMockHandler(),
  ]
}
