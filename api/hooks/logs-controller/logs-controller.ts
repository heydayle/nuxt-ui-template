/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useMutation,
} from '@tanstack/vue-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationReturnType,
} from '@tanstack/vue-query'
import {
  unref,
} from 'vue'
import type {
  MaybeRef,
} from 'vue'
import type {
  GetActionLogs200,
  GetLoginLogs200,
  PaginationReq,
} from '../../models'
import { customInstance } from '../../mutator/custom-instance'
import type { ErrorType } from '../../mutator/custom-instance'

type AwaitedInput<T> = PromiseLike<T> | T

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

export function getLoginLogs(paginationReq: MaybeRef<PaginationReq>) {
  paginationReq = unref(paginationReq)

  return customInstance<GetLoginLogs200>(
    { url: `/api-v1/work/logs/login`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: paginationReq },
  )
}

export function getGetLoginLogsMutationOptions<TError = ErrorType<unknown>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof getLoginLogs>>, TError, { data: PaginationReq }, TContext> }): UseMutationOptions<Awaited<ReturnType<typeof getLoginLogs>>, TError, { data: PaginationReq }, TContext> {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof getLoginLogs>>, { data: PaginationReq }> = (props) => {
    const { data } = props ?? {}

    return getLoginLogs(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetLoginLogsMutationResult = NonNullable<Awaited<ReturnType<typeof getLoginLogs>>>
export type GetLoginLogsMutationBody = PaginationReq
export type GetLoginLogsMutationError = ErrorType<unknown>

export function useGetLoginLogs<TError = ErrorType<unknown>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof getLoginLogs>>, TError, { data: PaginationReq }, TContext> }): UseMutationReturnType<
        Awaited<ReturnType<typeof getLoginLogs>>,
        TError,
        { data: PaginationReq },
        TContext
      > {
  const mutationOptions = getGetLoginLogsMutationOptions(options)

  return useMutation(mutationOptions)
}
export function getActionLogs(paginationReq: MaybeRef<PaginationReq>) {
  paginationReq = unref(paginationReq)

  return customInstance<GetActionLogs200>(
    { url: `/api-v1/work/logs/action`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: paginationReq },
  )
}

export function getGetActionLogsMutationOptions<TError = ErrorType<unknown>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof getActionLogs>>, TError, { data: PaginationReq }, TContext> }): UseMutationOptions<Awaited<ReturnType<typeof getActionLogs>>, TError, { data: PaginationReq }, TContext> {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof getActionLogs>>, { data: PaginationReq }> = (props) => {
    const { data } = props ?? {}

    return getActionLogs(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetActionLogsMutationResult = NonNullable<Awaited<ReturnType<typeof getActionLogs>>>
export type GetActionLogsMutationBody = PaginationReq
export type GetActionLogsMutationError = ErrorType<unknown>

export function useGetActionLogs<TError = ErrorType<unknown>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof getActionLogs>>, TError, { data: PaginationReq }, TContext> }): UseMutationReturnType<
        Awaited<ReturnType<typeof getActionLogs>>,
        TError,
        { data: PaginationReq },
        TContext
      > {
  const mutationOptions = getGetActionLogsMutationOptions(options)

  return useMutation(mutationOptions)
}
