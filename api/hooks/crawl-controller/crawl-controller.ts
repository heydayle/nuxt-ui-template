/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useQuery,
} from '@tanstack/vue-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query'
import {
  unref,
} from 'vue'
import type {
  AppResponseListCrawlSiteDto,
} from '../../models'
import { customInstance } from '../../mutator/custom-instance'
import type { ErrorType } from '../../mutator/custom-instance'

type AwaitedInput<T> = PromiseLike<T> | T

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

export function getListCrawlSite(signal?: AbortSignal) {
  return customInstance<AppResponseListCrawlSiteDto>(
    { url: `/api-v2/work/crawl`, method: 'GET', signal,
    },
  )
}

export function getGetListCrawlSiteQueryKey() {
  return ['api-v2', 'work', 'crawl'] as const
}

export function getGetListCrawlSiteQueryOptions<TData = Awaited<ReturnType<typeof getListCrawlSite>>, TError = ErrorType<unknown>>(options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getListCrawlSite>>, TError, TData>> }) {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetListCrawlSiteQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getListCrawlSite>>> = ({ signal }) => getListCrawlSite(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getListCrawlSite>>, TError, TData>
}

export type GetListCrawlSiteQueryResult = NonNullable<Awaited<ReturnType<typeof getListCrawlSite>>>
export type GetListCrawlSiteQueryError = ErrorType<unknown>

export function useGetListCrawlSite<TData = Awaited<ReturnType<typeof getListCrawlSite>>, TError = ErrorType<unknown>>(options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getListCrawlSite>>, TError, TData>> }): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetListCrawlSiteQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}
