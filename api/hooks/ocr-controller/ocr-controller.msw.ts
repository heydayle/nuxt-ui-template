/**
 * Generated by orval v6.28.2 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  faker,
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http,
} from 'msw'
import type {
  AppResponseListOCREngineEntity,
  AppResponseListTextBoxDtoRes,
  AppResponseOcrQueueTaskRes,
} from '../../models'

export const getDetectByYcommVisionResponseMock = (overrideResponse: any = {}): AppResponseListTextBoxDtoRes => ({ DATA: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ BACKGROUND_COLOR: faker.helpers.arrayElement([faker.word.sample(), undefined]), CAN_EDIT_BACKGROUND: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), CHAPTER_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), COMBINED_X: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), COMBINED_Y: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), CREATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), FEEDBACK: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), FIRST_TRANSLATE_ENGINE_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), FONT_FAMILY: faker.helpers.arrayElement([faker.word.sample(), undefined]), FONT_SIZE: faker.helpers.arrayElement([faker.word.sample(), undefined]), FONT_STYLE: faker.helpers.arrayElement([faker.word.sample(), undefined]), FONT_WEIGHT: faker.helpers.arrayElement([faker.word.sample(), undefined]), HEIGHT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), MANUAL_CREATE_TEXT_BOX: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), NOTE_TEXT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ORIGINAL_TEXT_BOX_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), PREFIX_INDEX: faker.helpers.arrayElement([faker.word.sample(), undefined]), ROTATE_DEGREE: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), TEXT: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_ALIGN: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_BOX_TYPE: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_COLOR: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_DECORATION: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_DECORATION_COLOR: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_UNDERLINE_OFFSET: faker.helpers.arrayElement([faker.word.sample(), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), VISION_BOX: faker.helpers.arrayElement([{ COMBINED_X: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), COMBINED_Y: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), DOMINANT_COLOR: faker.helpers.arrayElement([faker.word.sample(), undefined]), HEIGHT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), WIDTH: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse }, undefined]), WIDTH: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse })), undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getDetectByGoogleVisionResponseMock = (overrideResponse: any = {}): AppResponseOcrQueueTaskRes => ({ DATA: faker.helpers.arrayElement([{ CODE: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), MESSAGE: faker.helpers.arrayElement([faker.word.sample(), undefined]), STATUS: faker.helpers.arrayElement([faker.word.sample(), undefined]), TASK_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse }, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getGetEngineList1ResponseMock = (overrideResponse: any = {}): AppResponseListOCREngineEntity => ({ DATA: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ CREATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })), undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export function getDetectByYcommVisionMockHandler(overrideResponse?: AppResponseListTextBoxDtoRes) {
  return http.post('*/api-v2/work/ocr/ycomm-vision', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getDetectByYcommVisionResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getDetectByGoogleVisionMockHandler(overrideResponse?: AppResponseOcrQueueTaskRes) {
  return http.post('*/api-v2/work/ocr/google-vision', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getDetectByGoogleVisionResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getGetEngineList1MockHandler(overrideResponse?: AppResponseListOCREngineEntity) {
  return http.get('*/api-v2/work/ocr/engines', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getGetEngineList1ResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}
export function getOcrControllerMock() {
  return [
    getDetectByYcommVisionMockHandler(),
    getDetectByGoogleVisionMockHandler(),
    getGetEngineList1MockHandler(),
  ]
}
