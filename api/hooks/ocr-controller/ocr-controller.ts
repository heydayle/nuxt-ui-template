/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useMutation,
  useQuery,
} from '@tanstack/vue-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query'
import {
  unref,
} from 'vue'
import type {
  MaybeRef,
} from 'vue'
import type {
  AppResponseListOCREngineEntity,
  AppResponseListTextBoxDtoRes,
  AppResponseOcrQueueTaskRes,
  DetectByGoogleVisionParams,
  GoogleVisionReq,
  OcrQueueTaskReq,
} from '../../models'
import { customInstance } from '../../mutator/custom-instance'
import type { ErrorType } from '../../mutator/custom-instance'

type AwaitedInput<T> = PromiseLike<T> | T

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

export function detectByYcommVision(googleVisionReq: MaybeRef<GoogleVisionReq>) {
  googleVisionReq = unref(googleVisionReq)

  return customInstance<AppResponseListTextBoxDtoRes>(
    { url: `/api-v2/work/ocr/ycomm-vision`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: googleVisionReq },
  )
}

export function getDetectByYcommVisionMutationOptions<TError = ErrorType<unknown>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof detectByYcommVision>>, TError, { data: GoogleVisionReq }, TContext> }): UseMutationOptions<Awaited<ReturnType<typeof detectByYcommVision>>, TError, { data: GoogleVisionReq }, TContext> {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof detectByYcommVision>>, { data: GoogleVisionReq }> = (props) => {
    const { data } = props ?? {}

    return detectByYcommVision(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type DetectByYcommVisionMutationResult = NonNullable<Awaited<ReturnType<typeof detectByYcommVision>>>
export type DetectByYcommVisionMutationBody = GoogleVisionReq
export type DetectByYcommVisionMutationError = ErrorType<unknown>

export function useDetectByYcommVision<TError = ErrorType<unknown>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof detectByYcommVision>>, TError, { data: GoogleVisionReq }, TContext> }): UseMutationReturnType<
        Awaited<ReturnType<typeof detectByYcommVision>>,
        TError,
        { data: GoogleVisionReq },
        TContext
      > {
  const mutationOptions = getDetectByYcommVisionMutationOptions(options)

  return useMutation(mutationOptions)
}
export function detectByGoogleVision(ocrQueueTaskReq: MaybeRef<OcrQueueTaskReq>, params: MaybeRef<DetectByGoogleVisionParams>) {
  ocrQueueTaskReq = unref(ocrQueueTaskReq)
  params = unref(params)

  return customInstance<AppResponseOcrQueueTaskRes>(
    { url: `/api-v2/work/ocr/google-vision`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: ocrQueueTaskReq, params: unref(params) },
  )
}

export function getDetectByGoogleVisionMutationOptions<TError = ErrorType<unknown>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof detectByGoogleVision>>, TError, { data: OcrQueueTaskReq, params: DetectByGoogleVisionParams }, TContext> }): UseMutationOptions<Awaited<ReturnType<typeof detectByGoogleVision>>, TError, { data: OcrQueueTaskReq, params: DetectByGoogleVisionParams }, TContext> {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof detectByGoogleVision>>, { data: OcrQueueTaskReq, params: DetectByGoogleVisionParams }> = (props) => {
    const { data, params } = props ?? {}

    return detectByGoogleVision(data, params)
  }

  return { mutationFn, ...mutationOptions }
}

export type DetectByGoogleVisionMutationResult = NonNullable<Awaited<ReturnType<typeof detectByGoogleVision>>>
export type DetectByGoogleVisionMutationBody = OcrQueueTaskReq
export type DetectByGoogleVisionMutationError = ErrorType<unknown>

export function useDetectByGoogleVision<TError = ErrorType<unknown>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof detectByGoogleVision>>, TError, { data: OcrQueueTaskReq, params: DetectByGoogleVisionParams }, TContext> }): UseMutationReturnType<
        Awaited<ReturnType<typeof detectByGoogleVision>>,
        TError,
        { data: OcrQueueTaskReq, params: DetectByGoogleVisionParams },
        TContext
      > {
  const mutationOptions = getDetectByGoogleVisionMutationOptions(options)

  return useMutation(mutationOptions)
}
export function getEngineList1(signal?: AbortSignal) {
  return customInstance<AppResponseListOCREngineEntity>(
    { url: `/api-v2/work/ocr/engines`, method: 'GET', signal,
    },
  )
}

export function getGetEngineList1QueryKey() {
  return ['api-v2', 'work', 'ocr', 'engines'] as const
}

export function getGetEngineList1QueryOptions<TData = Awaited<ReturnType<typeof getEngineList1>>, TError = ErrorType<unknown>>(options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEngineList1>>, TError, TData>> }) {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetEngineList1QueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEngineList1>>> = ({ signal }) => getEngineList1(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getEngineList1>>, TError, TData>
}

export type GetEngineList1QueryResult = NonNullable<Awaited<ReturnType<typeof getEngineList1>>>
export type GetEngineList1QueryError = ErrorType<unknown>

export function useGetEngineList1<TData = Awaited<ReturnType<typeof getEngineList1>>, TError = ErrorType<unknown>>(options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEngineList1>>, TError, TData>> }): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetEngineList1QueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}
