/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useMutation,
  useQuery,
} from '@tanstack/vue-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query'
import {
  unref,
} from 'vue'
import type {
  MaybeRef,
} from 'vue'
import type {
  AppResponseListString,
  AppResponseObject,
  DownloadImageReq,
  GenPreSignedUrlReq,
  GetAllS3UrlsParams,
  GetS3UrlParams,
} from '../../models'
import { customInstance } from '../../mutator/custom-instance'
import type { ErrorType } from '../../mutator/custom-instance'

type AwaitedInput<T> = PromiseLike<T> | T

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

export function preSignedUpload(genPreSignedUrlReq: MaybeRef<GenPreSignedUrlReq>) {
  genPreSignedUrlReq = unref(genPreSignedUrlReq)

  return customInstance<AppResponseObject>(
    { url: `/api/work/s3/preSignedUpload`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: genPreSignedUrlReq },
  )
}

export function getPreSignedUploadMutationOptions<TError = ErrorType<unknown>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof preSignedUpload>>, TError, { data: GenPreSignedUrlReq }, TContext> }): UseMutationOptions<Awaited<ReturnType<typeof preSignedUpload>>, TError, { data: GenPreSignedUrlReq }, TContext> {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof preSignedUpload>>, { data: GenPreSignedUrlReq }> = (props) => {
    const { data } = props ?? {}

    return preSignedUpload(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PreSignedUploadMutationResult = NonNullable<Awaited<ReturnType<typeof preSignedUpload>>>
export type PreSignedUploadMutationBody = GenPreSignedUrlReq
export type PreSignedUploadMutationError = ErrorType<unknown>

export function usePreSignedUpload<TError = ErrorType<unknown>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof preSignedUpload>>, TError, { data: GenPreSignedUrlReq }, TContext> }): UseMutationReturnType<
        Awaited<ReturnType<typeof preSignedUpload>>,
        TError,
        { data: GenPreSignedUrlReq },
        TContext
      > {
  const mutationOptions = getPreSignedUploadMutationOptions(options)

  return useMutation(mutationOptions)
}
export function downloadImage(downloadImageReq: MaybeRef<DownloadImageReq>) {
  downloadImageReq = unref(downloadImageReq)

  return customInstance<AppResponseListString>(
    { url: `/api/work/s3/downloadImages`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: downloadImageReq },
  )
}

export function getDownloadImageMutationOptions<TError = ErrorType<unknown>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof downloadImage>>, TError, { data: DownloadImageReq }, TContext> }): UseMutationOptions<Awaited<ReturnType<typeof downloadImage>>, TError, { data: DownloadImageReq }, TContext> {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof downloadImage>>, { data: DownloadImageReq }> = (props) => {
    const { data } = props ?? {}

    return downloadImage(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type DownloadImageMutationResult = NonNullable<Awaited<ReturnType<typeof downloadImage>>>
export type DownloadImageMutationBody = DownloadImageReq
export type DownloadImageMutationError = ErrorType<unknown>

export function useDownloadImage<TError = ErrorType<unknown>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof downloadImage>>, TError, { data: DownloadImageReq }, TContext> }): UseMutationReturnType<
        Awaited<ReturnType<typeof downloadImage>>,
        TError,
        { data: DownloadImageReq },
        TContext
      > {
  const mutationOptions = getDownloadImageMutationOptions(options)

  return useMutation(mutationOptions)
}
export function getAllS3Urls(params?: MaybeRef<GetAllS3UrlsParams>, signal?: AbortSignal) {
  params = unref(params)

  return customInstance<AppResponseObject>(
    { url: `/api/work/s3/getS3Urls`, method: 'GET', params: unref(params), signal,
    },
  )
}

export function getGetAllS3UrlsQueryKey(params?: MaybeRef<GetAllS3UrlsParams>) {
  return ['api', 'work', 's3', 'getS3Urls', ...(params ? [params] : [])] as const
}

export function getGetAllS3UrlsQueryOptions<TData = Awaited<ReturnType<typeof getAllS3Urls>>, TError = ErrorType<unknown>>(params?: MaybeRef<GetAllS3UrlsParams>, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllS3Urls>>, TError, TData>> }) {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetAllS3UrlsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllS3Urls>>> = ({ signal }) => getAllS3Urls(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getAllS3Urls>>, TError, TData>
}

export type GetAllS3UrlsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllS3Urls>>>
export type GetAllS3UrlsQueryError = ErrorType<unknown>

export function useGetAllS3Urls<TData = Awaited<ReturnType<typeof getAllS3Urls>>, TError = ErrorType<unknown>>(params?: MaybeRef<GetAllS3UrlsParams>, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllS3Urls>>, TError, TData>> }): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllS3UrlsQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

export function getS3Url(params: MaybeRef<GetS3UrlParams>, signal?: AbortSignal) {
  params = unref(params)

  return customInstance<string>(
    { url: `/api/work/s3/getS3Url`, method: 'GET', params: unref(params), signal,
    },
  )
}

export function getGetS3UrlQueryKey(params: MaybeRef<GetS3UrlParams>) {
  return ['api', 'work', 's3', 'getS3Url', ...(params ? [params] : [])] as const
}

export function getGetS3UrlQueryOptions<TData = Awaited<ReturnType<typeof getS3Url>>, TError = ErrorType<unknown>>(params: MaybeRef<GetS3UrlParams>, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getS3Url>>, TError, TData>> }) {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetS3UrlQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getS3Url>>> = ({ signal }) => getS3Url(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getS3Url>>, TError, TData>
}

export type GetS3UrlQueryResult = NonNullable<Awaited<ReturnType<typeof getS3Url>>>
export type GetS3UrlQueryError = ErrorType<unknown>

export function useGetS3Url<TData = Awaited<ReturnType<typeof getS3Url>>, TError = ErrorType<unknown>>(params: MaybeRef<GetS3UrlParams>, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getS3Url>>, TError, TData>> }): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetS3UrlQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

export function cleanMissingDeleteFiles(signal?: AbortSignal) {
  return customInstance<AppResponseObject>(
    { url: `/api/work/s3/cleanMissDeleteFiles`, method: 'GET', signal,
    },
  )
}

export function getCleanMissingDeleteFilesQueryKey() {
  return ['api', 'work', 's3', 'cleanMissDeleteFiles'] as const
}

export function getCleanMissingDeleteFilesQueryOptions<TData = Awaited<ReturnType<typeof cleanMissingDeleteFiles>>, TError = ErrorType<unknown>>(options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof cleanMissingDeleteFiles>>, TError, TData>> }) {
  const { query: queryOptions } = options ?? {}

  const queryKey = getCleanMissingDeleteFilesQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof cleanMissingDeleteFiles>>> = ({ signal }) => cleanMissingDeleteFiles(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof cleanMissingDeleteFiles>>, TError, TData>
}

export type CleanMissingDeleteFilesQueryResult = NonNullable<Awaited<ReturnType<typeof cleanMissingDeleteFiles>>>
export type CleanMissingDeleteFilesQueryError = ErrorType<unknown>

export function useCleanMissingDeleteFiles<TData = Awaited<ReturnType<typeof cleanMissingDeleteFiles>>, TError = ErrorType<unknown>>(options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof cleanMissingDeleteFiles>>, TError, TData>> }): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getCleanMissingDeleteFilesQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}
