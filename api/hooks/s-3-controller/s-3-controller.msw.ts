/**
 * Generated by orval v6.28.2 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  faker,
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http,
} from 'msw'
import type {
  AppResponseListString,
  AppResponseObject,
} from '../../models'

export const getPreSignedUploadResponseMock = (overrideResponse: any = {}): AppResponseObject => ({ DATA: faker.helpers.arrayElement([{}, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getDownloadImageResponseMock = (overrideResponse: any = {}): AppResponseListString => ({ DATA: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getGetAllS3UrlsResponseMock = (overrideResponse: any = {}): AppResponseObject => ({ DATA: faker.helpers.arrayElement([{}, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getGetS3UrlResponseMock = (): string => (faker.word.sample())

export const getCleanMissingDeleteFilesResponseMock = (overrideResponse: any = {}): AppResponseObject => ({ DATA: faker.helpers.arrayElement([{}, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export function getPreSignedUploadMockHandler(overrideResponse?: AppResponseObject) {
  return http.post('*/api/work/s3/preSignedUpload', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getPreSignedUploadResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getDownloadImageMockHandler(overrideResponse?: AppResponseListString) {
  return http.post('*/api/work/s3/downloadImages', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getDownloadImageResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getGetAllS3UrlsMockHandler(overrideResponse?: AppResponseObject) {
  return http.get('*/api/work/s3/getS3Urls', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getGetAllS3UrlsResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getGetS3UrlMockHandler(overrideResponse?: string) {
  return http.get('*/api/work/s3/getS3Url', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getGetS3UrlResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getCleanMissingDeleteFilesMockHandler(overrideResponse?: AppResponseObject) {
  return http.get('*/api/work/s3/cleanMissDeleteFiles', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getCleanMissingDeleteFilesResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}
export function getS3ControllerMock() {
  return [
    getPreSignedUploadMockHandler(),
    getDownloadImageMockHandler(),
    getGetAllS3UrlsMockHandler(),
    getGetS3UrlMockHandler(),
    getCleanMissingDeleteFilesMockHandler(),
  ]
}
