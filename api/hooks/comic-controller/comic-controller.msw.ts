/**
 * Generated by orval v6.28.2 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  faker,
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http,
} from 'msw'
import type {
  AppResponseComicDetailRes,
  AppResponseDeleteRes,
  AppResponseGetComicIdRes,
  AppResponseListGroupFilterRes,
  AppResponseSearchRes,
} from '../../models'

export const getGetComicDetailResponseMock = (overrideResponse: any = {}): AppResponseComicDetailRes => ({ DATA: faker.helpers.arrayElement([{ COMIC_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), COMIC_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), COMIC_SITE_ID: faker.helpers.arrayElement([faker.word.sample(), undefined]), GROUP: faker.helpers.arrayElement([{ CREATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), CURRENT_USING_COUNT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), LIMIT_COUNT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), LIMITED: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), SITE_CAN_CRAWL: faker.helpers.arrayElement([faker.word.sample(), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse }, undefined]), PERMISSION: faker.helpers.arrayElement([{ CAN_BRING: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), CAN_CRAWL: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), CAN_UPLOAD: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ...overrideResponse }, undefined]), SITE: faker.helpers.arrayElement([{ ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), URL: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse }, undefined]), ...overrideResponse }, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getUpdateComicResponseMock = (overrideResponse: any = {}): AppResponseComicDetailRes => ({ DATA: faker.helpers.arrayElement([{ COMIC_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), COMIC_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), COMIC_SITE_ID: faker.helpers.arrayElement([faker.word.sample(), undefined]), GROUP: faker.helpers.arrayElement([{ CREATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), CURRENT_USING_COUNT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), LIMIT_COUNT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), LIMITED: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), SITE_CAN_CRAWL: faker.helpers.arrayElement([faker.word.sample(), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse }, undefined]), PERMISSION: faker.helpers.arrayElement([{ CAN_BRING: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), CAN_CRAWL: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), CAN_UPLOAD: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ...overrideResponse }, undefined]), SITE: faker.helpers.arrayElement([{ ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), URL: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse }, undefined]), ...overrideResponse }, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getDeleteComicResponseMock = (overrideResponse: any = {}): AppResponseDeleteRes => ({ DATA: faker.helpers.arrayElement([{ MESSAGE: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse }, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getGetComicIdResponseMock = (overrideResponse: any = {}): AppResponseGetComicIdRes => ({ DATA: faker.helpers.arrayElement([{ COMIC_ID: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse }, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getSearchComicResponseMock = (overrideResponse: any = {}): AppResponseSearchRes => ({ DATA: faker.helpers.arrayElement([{ CURRENT_PAGE: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ITEMS: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ GROUP_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), LOCALE_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), TOTAL_CHAPTERS: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })), undefined]), SIZE: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), TOTAL_PAGES: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), TOTAL_RESULT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse }, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getGroupFilterResponseMock = (overrideResponse: any = {}): AppResponseListGroupFilterRes => ({ DATA: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })), undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export function getGetComicDetailMockHandler(overrideResponse?: AppResponseComicDetailRes) {
  return http.get('*/api-v2/work/comic/:comicId', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getGetComicDetailResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getUpdateComicMockHandler(overrideResponse?: AppResponseComicDetailRes) {
  return http.put('*/api-v2/work/comic/:comicId', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getUpdateComicResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getDeleteComicMockHandler(overrideResponse?: AppResponseDeleteRes) {
  return http.delete('*/api-v2/work/comic/:comicId', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getDeleteComicResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getGetComicIdMockHandler(overrideResponse?: AppResponseGetComicIdRes) {
  return http.post('*/api-v2/work/comic/get-id', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getGetComicIdResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getSearchComicMockHandler(overrideResponse?: AppResponseSearchRes) {
  return http.get('*/api-v2/work/comic/search', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getSearchComicResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getGroupFilterMockHandler(overrideResponse?: AppResponseListGroupFilterRes) {
  return http.get('*/api-v2/work/comic/group-filter', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getGroupFilterResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}
export function getComicControllerMock() {
  return [
    getGetComicDetailMockHandler(),
    getUpdateComicMockHandler(),
    getDeleteComicMockHandler(),
    getGetComicIdMockHandler(),
    getSearchComicMockHandler(),
    getGroupFilterMockHandler(),
  ]
}
