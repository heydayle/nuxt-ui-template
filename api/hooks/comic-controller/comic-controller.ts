/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useMutation,
  useQuery,
} from '@tanstack/vue-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query'
import {
  computed,
  unref,
} from 'vue'
import type {
  MaybeRef,
} from 'vue'
import type {
  AppResponseComicDetailRes,
  AppResponseDeleteRes,
  AppResponseGetComicIdRes,
  AppResponseListGroupFilterRes,
  AppResponseSearchRes,
  DeleteComicReq,
  GetComicIdReq,
  SearchComicParams,
  UpdateComicReq,
} from '../../models'
import { customInstance } from '../../mutator/custom-instance'
import type { ErrorType } from '../../mutator/custom-instance'

type AwaitedInput<T> = PromiseLike<T> | T

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

export function getComicDetail(comicId: MaybeRef<number>, signal?: AbortSignal) {
  comicId = unref(comicId)

  return customInstance<AppResponseComicDetailRes>(
    { url: `/api-v2/work/comic/${comicId}`, method: 'GET', signal,
    },
  )
}

export function getGetComicDetailQueryKey(comicId: MaybeRef<number>) {
  return ['api-v2', 'work', 'comic', comicId] as const
}

export function getGetComicDetailQueryOptions<TData = Awaited<ReturnType<typeof getComicDetail>>, TError = ErrorType<unknown>>(comicId: MaybeRef<number>, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getComicDetail>>, TError, TData>> }) {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetComicDetailQueryKey(comicId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getComicDetail>>> = ({ signal }) => getComicDetail(comicId, signal)

  return { queryKey, queryFn, enabled: computed(() => !!(unref(comicId))), ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getComicDetail>>, TError, TData>
}

export type GetComicDetailQueryResult = NonNullable<Awaited<ReturnType<typeof getComicDetail>>>
export type GetComicDetailQueryError = ErrorType<unknown>

export function useGetComicDetail<TData = Awaited<ReturnType<typeof getComicDetail>>, TError = ErrorType<unknown>>(comicId: MaybeRef<number>, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getComicDetail>>, TError, TData>> }): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetComicDetailQueryOptions(comicId, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

export function updateComic(comicId: MaybeRef<number>, updateComicReq: MaybeRef<UpdateComicReq>) {
  comicId = unref(comicId)
  updateComicReq = unref(updateComicReq)

  return customInstance<AppResponseComicDetailRes>(
    { url: `/api-v2/work/comic/${comicId}`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: updateComicReq },
  )
}

export function getUpdateComicMutationOptions<TError = ErrorType<unknown>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof updateComic>>, TError, { comicId: number, data: UpdateComicReq }, TContext> }): UseMutationOptions<Awaited<ReturnType<typeof updateComic>>, TError, { comicId: number, data: UpdateComicReq }, TContext> {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateComic>>, { comicId: number, data: UpdateComicReq }> = (props) => {
    const { comicId, data } = props ?? {}

    return updateComic(comicId, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateComicMutationResult = NonNullable<Awaited<ReturnType<typeof updateComic>>>
export type UpdateComicMutationBody = UpdateComicReq
export type UpdateComicMutationError = ErrorType<unknown>

export function useUpdateComic<TError = ErrorType<unknown>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof updateComic>>, TError, { comicId: number, data: UpdateComicReq }, TContext> }): UseMutationReturnType<
        Awaited<ReturnType<typeof updateComic>>,
        TError,
        { comicId: number, data: UpdateComicReq },
        TContext
      > {
  const mutationOptions = getUpdateComicMutationOptions(options)

  return useMutation(mutationOptions)
}
export function deleteComic(comicId: MaybeRef<number>, deleteComicReq: MaybeRef<DeleteComicReq>) {
  comicId = unref(comicId)
  deleteComicReq = unref(deleteComicReq)

  return customInstance<AppResponseDeleteRes>(
    { url: `/api-v2/work/comic/${comicId}`, method: 'DELETE', headers: { 'Content-Type': 'application/json' }, data: deleteComicReq },
  )
}

export function getDeleteComicMutationOptions<TError = ErrorType<unknown>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteComic>>, TError, { comicId: number, data: DeleteComicReq }, TContext> }): UseMutationOptions<Awaited<ReturnType<typeof deleteComic>>, TError, { comicId: number, data: DeleteComicReq }, TContext> {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteComic>>, { comicId: number, data: DeleteComicReq }> = (props) => {
    const { comicId, data } = props ?? {}

    return deleteComic(comicId, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteComicMutationResult = NonNullable<Awaited<ReturnType<typeof deleteComic>>>
export type DeleteComicMutationBody = DeleteComicReq
export type DeleteComicMutationError = ErrorType<unknown>

export function useDeleteComic<TError = ErrorType<unknown>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteComic>>, TError, { comicId: number, data: DeleteComicReq }, TContext> }): UseMutationReturnType<
        Awaited<ReturnType<typeof deleteComic>>,
        TError,
        { comicId: number, data: DeleteComicReq },
        TContext
      > {
  const mutationOptions = getDeleteComicMutationOptions(options)

  return useMutation(mutationOptions)
}
export function getComicId(getComicIdReq: MaybeRef<GetComicIdReq>) {
  getComicIdReq = unref(getComicIdReq)

  return customInstance<AppResponseGetComicIdRes>(
    { url: `/api-v2/work/comic/get-id`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: getComicIdReq },
  )
}

export function getGetComicIdMutationOptions<TError = ErrorType<unknown>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof getComicId>>, TError, { data: GetComicIdReq }, TContext> }): UseMutationOptions<Awaited<ReturnType<typeof getComicId>>, TError, { data: GetComicIdReq }, TContext> {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof getComicId>>, { data: GetComicIdReq }> = (props) => {
    const { data } = props ?? {}

    return getComicId(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetComicIdMutationResult = NonNullable<Awaited<ReturnType<typeof getComicId>>>
export type GetComicIdMutationBody = GetComicIdReq
export type GetComicIdMutationError = ErrorType<unknown>

export function useGetComicId<TError = ErrorType<unknown>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof getComicId>>, TError, { data: GetComicIdReq }, TContext> }): UseMutationReturnType<
        Awaited<ReturnType<typeof getComicId>>,
        TError,
        { data: GetComicIdReq },
        TContext
      > {
  const mutationOptions = getGetComicIdMutationOptions(options)

  return useMutation(mutationOptions)
}
export function searchComic(params?: MaybeRef<SearchComicParams>, signal?: AbortSignal) {
  params = unref(params)

  return customInstance<AppResponseSearchRes>(
    { url: `/api-v2/work/comic/search`, method: 'GET', params: unref(params), signal,
    },
  )
}

export function getSearchComicQueryKey(params?: MaybeRef<SearchComicParams>) {
  return ['api-v2', 'work', 'comic', 'search', ...(params ? [params] : [])] as const
}

export function getSearchComicQueryOptions<TData = Awaited<ReturnType<typeof searchComic>>, TError = ErrorType<unknown>>(params?: MaybeRef<SearchComicParams>, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof searchComic>>, TError, TData>> }) {
  const { query: queryOptions } = options ?? {}

  const queryKey = getSearchComicQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchComic>>> = ({ signal }) => searchComic(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof searchComic>>, TError, TData>
}

export type SearchComicQueryResult = NonNullable<Awaited<ReturnType<typeof searchComic>>>
export type SearchComicQueryError = ErrorType<unknown>

export function useSearchComic<TData = Awaited<ReturnType<typeof searchComic>>, TError = ErrorType<unknown>>(params?: MaybeRef<SearchComicParams>, options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof searchComic>>, TError, TData>> }): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getSearchComicQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}

export function groupFilter(signal?: AbortSignal) {
  return customInstance<AppResponseListGroupFilterRes>(
    { url: `/api-v2/work/comic/group-filter`, method: 'GET', signal,
    },
  )
}

export function getGroupFilterQueryKey() {
  return ['api-v2', 'work', 'comic', 'group-filter'] as const
}

export function getGroupFilterQueryOptions<TData = Awaited<ReturnType<typeof groupFilter>>, TError = ErrorType<unknown>>(options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof groupFilter>>, TError, TData>> }) {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGroupFilterQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof groupFilter>>> = ({ signal }) => groupFilter(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof groupFilter>>, TError, TData>
}

export type GroupFilterQueryResult = NonNullable<Awaited<ReturnType<typeof groupFilter>>>
export type GroupFilterQueryError = ErrorType<unknown>

export function useGroupFilter<TData = Awaited<ReturnType<typeof groupFilter>>, TError = ErrorType<unknown>>(options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof groupFilter>>, TError, TData>> }): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGroupFilterQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = unref(queryOptions).queryKey as QueryKey

  return query
}
