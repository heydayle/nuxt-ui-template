/**
 * Generated by orval v6.28.2 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  faker,
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http,
} from 'msw'
import type {
  AppResponseChangeChapterStatusRes,
  AppResponseChapterDetailRes,
  AppResponseCheckNameExistRes,
  AppResponseExportQueueTaskRes,
  AppResponseExportTrainingResult,
  AppResponseRedirectExportChapterInput,
  AppResponseRes,
  AppResponseSearchRes,
  AppResponseString,
} from '../../models'

export const getGetChapterResponseMock = (overrideResponse: any = {}): AppResponseChapterDetailRes => ({ DATA: faker.helpers.arrayElement([{ CHAPTER_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), CHAPTER_SITE_ID: faker.helpers.arrayElement([faker.word.sample(), undefined]), COMIC: faker.helpers.arrayElement([{ COMIC_SITE_ID: faker.helpers.arrayElement([faker.word.sample(), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse }, undefined]), CREATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), DEFAULT_TRANSLATED_LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), DEFAULT_TRANSLATED_LOCALE_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), DEFAULT_TRANSLATED_LOCALE_ISO2: faker.helpers.arrayElement([faker.word.sample(), undefined]), DEFAULT_TRANSLATED_LOCALE_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), FROM_SITE: faker.helpers.arrayElement([faker.word.sample(), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IMAGES: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ HEIGHT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IMAGE_URL: faker.helpers.arrayElement([faker.word.sample(), undefined]), WIDTH: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse })), undefined]), LOCALES: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), ORIGINAL: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), TEXT_BOXES: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ BACKGROUND_COLOR: faker.helpers.arrayElement([faker.word.sample(), undefined]), CAN_EDIT_BACKGROUND: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), CHAPTER_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), COMBINED_X: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), COMBINED_Y: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), CREATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), FEEDBACK: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), FIRST_TRANSLATE_ENGINE_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), FONT_FAMILY: faker.helpers.arrayElement([faker.word.sample(), undefined]), FONT_SIZE: faker.helpers.arrayElement([faker.word.sample(), undefined]), FONT_STYLE: faker.helpers.arrayElement([faker.word.sample(), undefined]), FONT_WEIGHT: faker.helpers.arrayElement([faker.word.sample(), undefined]), HEIGHT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), MANUAL_CREATE_TEXT_BOX: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), NOTE_TEXT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ORIGINAL_TEXT_BOX_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), PREFIX_INDEX: faker.helpers.arrayElement([faker.word.sample(), undefined]), ROTATE_DEGREE: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), TEXT: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_ALIGN: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_BOX_TYPE: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_COLOR: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_DECORATION: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_DECORATION_COLOR: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_UNDERLINE_OFFSET: faker.helpers.arrayElement([faker.word.sample(), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), VISION_BOX: faker.helpers.arrayElement([{ COMBINED_X: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), COMBINED_Y: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), DOMINANT_COLOR: faker.helpers.arrayElement([faker.word.sample(), undefined]), HEIGHT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), WIDTH: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse }, undefined]), WIDTH: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse })), undefined]), ...overrideResponse })), undefined]), OCR_DETECTED_TEXT_BOX_COUNT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ORIGINAL_LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), ORIGINAL_LOCALE_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ORIGINAL_LOCALE_ISO2: faker.helpers.arrayElement([faker.word.sample(), undefined]), ORIGINAL_LOCALE_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), OWNER: faker.helpers.arrayElement([faker.word.sample(), undefined]), PERMISSION: faker.helpers.arrayElement([{ CAN_IMPORT_EXCEL: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), CAN_PSE_IMPORTING: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), CAN_TRANSLATE: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), EXPORT_EXCEL: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), EXPORT_IMAGE: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), EXPORT_JSON: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), EXPORT_PSD: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), SHOW_DRAW_TEXT_BOX_BTN: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), SHOW_OCR_BTN: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), SHOW_TOGGLE_TEXT_BOX_BTN: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), SHOW_TOGGLE_VISION_BOX_BTN: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), SHOW_TRANSLATE_BTN: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), SHOW_TRANSLATE_ENGINE_BTN: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ...overrideResponse }, undefined]), STATUS: faker.helpers.arrayElement([faker.word.sample(), undefined]), TRANSLATED_TEXT_BOX_COUNT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), UPLOAD: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), VISION_FINISHED: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ...overrideResponse }, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getUpdateChapterResponseMock = (overrideResponse: any = {}): AppResponseChapterDetailRes => ({ DATA: faker.helpers.arrayElement([{ CHAPTER_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), CHAPTER_SITE_ID: faker.helpers.arrayElement([faker.word.sample(), undefined]), COMIC: faker.helpers.arrayElement([{ COMIC_SITE_ID: faker.helpers.arrayElement([faker.word.sample(), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse }, undefined]), CREATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), DEFAULT_TRANSLATED_LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), DEFAULT_TRANSLATED_LOCALE_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), DEFAULT_TRANSLATED_LOCALE_ISO2: faker.helpers.arrayElement([faker.word.sample(), undefined]), DEFAULT_TRANSLATED_LOCALE_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), FROM_SITE: faker.helpers.arrayElement([faker.word.sample(), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IMAGES: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ HEIGHT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IMAGE_URL: faker.helpers.arrayElement([faker.word.sample(), undefined]), WIDTH: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse })), undefined]), LOCALES: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), ORIGINAL: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), TEXT_BOXES: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ BACKGROUND_COLOR: faker.helpers.arrayElement([faker.word.sample(), undefined]), CAN_EDIT_BACKGROUND: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), CHAPTER_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), COMBINED_X: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), COMBINED_Y: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), CREATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), FEEDBACK: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), FIRST_TRANSLATE_ENGINE_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), FONT_FAMILY: faker.helpers.arrayElement([faker.word.sample(), undefined]), FONT_SIZE: faker.helpers.arrayElement([faker.word.sample(), undefined]), FONT_STYLE: faker.helpers.arrayElement([faker.word.sample(), undefined]), FONT_WEIGHT: faker.helpers.arrayElement([faker.word.sample(), undefined]), HEIGHT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), MANUAL_CREATE_TEXT_BOX: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), NOTE_TEXT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ORIGINAL_TEXT_BOX_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), PREFIX_INDEX: faker.helpers.arrayElement([faker.word.sample(), undefined]), ROTATE_DEGREE: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), TEXT: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_ALIGN: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_BOX_TYPE: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_COLOR: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_DECORATION: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_DECORATION_COLOR: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_UNDERLINE_OFFSET: faker.helpers.arrayElement([faker.word.sample(), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), VISION_BOX: faker.helpers.arrayElement([{ COMBINED_X: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), COMBINED_Y: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), DOMINANT_COLOR: faker.helpers.arrayElement([faker.word.sample(), undefined]), HEIGHT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), WIDTH: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse }, undefined]), WIDTH: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse })), undefined]), ...overrideResponse })), undefined]), OCR_DETECTED_TEXT_BOX_COUNT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ORIGINAL_LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), ORIGINAL_LOCALE_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ORIGINAL_LOCALE_ISO2: faker.helpers.arrayElement([faker.word.sample(), undefined]), ORIGINAL_LOCALE_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), OWNER: faker.helpers.arrayElement([faker.word.sample(), undefined]), PERMISSION: faker.helpers.arrayElement([{ CAN_IMPORT_EXCEL: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), CAN_PSE_IMPORTING: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), CAN_TRANSLATE: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), EXPORT_EXCEL: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), EXPORT_IMAGE: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), EXPORT_JSON: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), EXPORT_PSD: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), SHOW_DRAW_TEXT_BOX_BTN: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), SHOW_OCR_BTN: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), SHOW_TOGGLE_TEXT_BOX_BTN: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), SHOW_TOGGLE_VISION_BOX_BTN: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), SHOW_TRANSLATE_BTN: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), SHOW_TRANSLATE_ENGINE_BTN: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ...overrideResponse }, undefined]), STATUS: faker.helpers.arrayElement([faker.word.sample(), undefined]), TRANSLATED_TEXT_BOX_COUNT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), UPLOAD: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), VISION_FINISHED: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ...overrideResponse }, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getUpdateChapterStatusResponseMock = (overrideResponse: any = {}): AppResponseChangeChapterStatusRes => ({ DATA: faker.helpers.arrayElement([{ CHAPTER_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), NEW_STATUS: faker.helpers.arrayElement([faker.word.sample(), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse }, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getCreateChapterResponseMock = (overrideResponse: any = {}): AppResponseChapterDetailRes => ({ DATA: faker.helpers.arrayElement([{ CHAPTER_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), CHAPTER_SITE_ID: faker.helpers.arrayElement([faker.word.sample(), undefined]), COMIC: faker.helpers.arrayElement([{ COMIC_SITE_ID: faker.helpers.arrayElement([faker.word.sample(), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse }, undefined]), CREATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), DEFAULT_TRANSLATED_LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), DEFAULT_TRANSLATED_LOCALE_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), DEFAULT_TRANSLATED_LOCALE_ISO2: faker.helpers.arrayElement([faker.word.sample(), undefined]), DEFAULT_TRANSLATED_LOCALE_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), FROM_SITE: faker.helpers.arrayElement([faker.word.sample(), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IMAGES: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ HEIGHT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IMAGE_URL: faker.helpers.arrayElement([faker.word.sample(), undefined]), WIDTH: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse })), undefined]), LOCALES: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), ORIGINAL: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), TEXT_BOXES: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ BACKGROUND_COLOR: faker.helpers.arrayElement([faker.word.sample(), undefined]), CAN_EDIT_BACKGROUND: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), CHAPTER_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), COMBINED_X: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), COMBINED_Y: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), CREATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), FEEDBACK: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), FIRST_TRANSLATE_ENGINE_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), FONT_FAMILY: faker.helpers.arrayElement([faker.word.sample(), undefined]), FONT_SIZE: faker.helpers.arrayElement([faker.word.sample(), undefined]), FONT_STYLE: faker.helpers.arrayElement([faker.word.sample(), undefined]), FONT_WEIGHT: faker.helpers.arrayElement([faker.word.sample(), undefined]), HEIGHT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), MANUAL_CREATE_TEXT_BOX: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), NOTE_TEXT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ORIGINAL_TEXT_BOX_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), PREFIX_INDEX: faker.helpers.arrayElement([faker.word.sample(), undefined]), ROTATE_DEGREE: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), TEXT: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_ALIGN: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_BOX_TYPE: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_COLOR: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_DECORATION: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_DECORATION_COLOR: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_UNDERLINE_OFFSET: faker.helpers.arrayElement([faker.word.sample(), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), VISION_BOX: faker.helpers.arrayElement([{ COMBINED_X: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), COMBINED_Y: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), DOMINANT_COLOR: faker.helpers.arrayElement([faker.word.sample(), undefined]), HEIGHT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), WIDTH: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse }, undefined]), WIDTH: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse })), undefined]), ...overrideResponse })), undefined]), OCR_DETECTED_TEXT_BOX_COUNT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ORIGINAL_LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), ORIGINAL_LOCALE_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ORIGINAL_LOCALE_ISO2: faker.helpers.arrayElement([faker.word.sample(), undefined]), ORIGINAL_LOCALE_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), OWNER: faker.helpers.arrayElement([faker.word.sample(), undefined]), PERMISSION: faker.helpers.arrayElement([{ CAN_IMPORT_EXCEL: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), CAN_PSE_IMPORTING: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), CAN_TRANSLATE: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), EXPORT_EXCEL: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), EXPORT_IMAGE: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), EXPORT_JSON: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), EXPORT_PSD: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), SHOW_DRAW_TEXT_BOX_BTN: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), SHOW_OCR_BTN: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), SHOW_TOGGLE_TEXT_BOX_BTN: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), SHOW_TOGGLE_VISION_BOX_BTN: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), SHOW_TRANSLATE_BTN: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), SHOW_TRANSLATE_ENGINE_BTN: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ...overrideResponse }, undefined]), STATUS: faker.helpers.arrayElement([faker.word.sample(), undefined]), TRANSLATED_TEXT_BOX_COUNT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), UPLOAD: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), VISION_FINISHED: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ...overrideResponse }, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getCreateTextBoxesResponseMock = (overrideResponse: any = {}): AppResponseChapterDetailRes => ({ DATA: faker.helpers.arrayElement([{ CHAPTER_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), CHAPTER_SITE_ID: faker.helpers.arrayElement([faker.word.sample(), undefined]), COMIC: faker.helpers.arrayElement([{ COMIC_SITE_ID: faker.helpers.arrayElement([faker.word.sample(), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse }, undefined]), CREATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), DEFAULT_TRANSLATED_LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), DEFAULT_TRANSLATED_LOCALE_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), DEFAULT_TRANSLATED_LOCALE_ISO2: faker.helpers.arrayElement([faker.word.sample(), undefined]), DEFAULT_TRANSLATED_LOCALE_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), FROM_SITE: faker.helpers.arrayElement([faker.word.sample(), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IMAGES: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ HEIGHT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IMAGE_URL: faker.helpers.arrayElement([faker.word.sample(), undefined]), WIDTH: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse })), undefined]), LOCALES: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), ORIGINAL: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), TEXT_BOXES: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ BACKGROUND_COLOR: faker.helpers.arrayElement([faker.word.sample(), undefined]), CAN_EDIT_BACKGROUND: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), CHAPTER_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), COMBINED_X: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), COMBINED_Y: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), CREATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), FEEDBACK: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), FIRST_TRANSLATE_ENGINE_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), FONT_FAMILY: faker.helpers.arrayElement([faker.word.sample(), undefined]), FONT_SIZE: faker.helpers.arrayElement([faker.word.sample(), undefined]), FONT_STYLE: faker.helpers.arrayElement([faker.word.sample(), undefined]), FONT_WEIGHT: faker.helpers.arrayElement([faker.word.sample(), undefined]), HEIGHT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), MANUAL_CREATE_TEXT_BOX: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), NOTE_TEXT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ORIGINAL_TEXT_BOX_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), PREFIX_INDEX: faker.helpers.arrayElement([faker.word.sample(), undefined]), ROTATE_DEGREE: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), TEXT: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_ALIGN: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_BOX_TYPE: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_COLOR: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_DECORATION: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_DECORATION_COLOR: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_UNDERLINE_OFFSET: faker.helpers.arrayElement([faker.word.sample(), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), VISION_BOX: faker.helpers.arrayElement([{ COMBINED_X: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), COMBINED_Y: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), DOMINANT_COLOR: faker.helpers.arrayElement([faker.word.sample(), undefined]), HEIGHT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), WIDTH: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse }, undefined]), WIDTH: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse })), undefined]), ...overrideResponse })), undefined]), OCR_DETECTED_TEXT_BOX_COUNT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ORIGINAL_LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), ORIGINAL_LOCALE_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ORIGINAL_LOCALE_ISO2: faker.helpers.arrayElement([faker.word.sample(), undefined]), ORIGINAL_LOCALE_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), OWNER: faker.helpers.arrayElement([faker.word.sample(), undefined]), PERMISSION: faker.helpers.arrayElement([{ CAN_IMPORT_EXCEL: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), CAN_PSE_IMPORTING: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), CAN_TRANSLATE: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), EXPORT_EXCEL: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), EXPORT_IMAGE: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), EXPORT_JSON: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), EXPORT_PSD: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), SHOW_DRAW_TEXT_BOX_BTN: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), SHOW_OCR_BTN: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), SHOW_TOGGLE_TEXT_BOX_BTN: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), SHOW_TOGGLE_VISION_BOX_BTN: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), SHOW_TRANSLATE_BTN: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), SHOW_TRANSLATE_ENGINE_BTN: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ...overrideResponse }, undefined]), STATUS: faker.helpers.arrayElement([faker.word.sample(), undefined]), TRANSLATED_TEXT_BOX_COUNT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), UPLOAD: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), VISION_FINISHED: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ...overrideResponse }, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getImportExcelResponseMock = (overrideResponse: any = {}): AppResponseChapterDetailRes => ({ DATA: faker.helpers.arrayElement([{ CHAPTER_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), CHAPTER_SITE_ID: faker.helpers.arrayElement([faker.word.sample(), undefined]), COMIC: faker.helpers.arrayElement([{ COMIC_SITE_ID: faker.helpers.arrayElement([faker.word.sample(), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse }, undefined]), CREATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), DEFAULT_TRANSLATED_LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), DEFAULT_TRANSLATED_LOCALE_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), DEFAULT_TRANSLATED_LOCALE_ISO2: faker.helpers.arrayElement([faker.word.sample(), undefined]), DEFAULT_TRANSLATED_LOCALE_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), FROM_SITE: faker.helpers.arrayElement([faker.word.sample(), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IMAGES: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ HEIGHT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IMAGE_URL: faker.helpers.arrayElement([faker.word.sample(), undefined]), WIDTH: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse })), undefined]), LOCALES: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), ORIGINAL: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), TEXT_BOXES: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ BACKGROUND_COLOR: faker.helpers.arrayElement([faker.word.sample(), undefined]), CAN_EDIT_BACKGROUND: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), CHAPTER_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), COMBINED_X: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), COMBINED_Y: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), CREATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), FEEDBACK: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), FIRST_TRANSLATE_ENGINE_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), FONT_FAMILY: faker.helpers.arrayElement([faker.word.sample(), undefined]), FONT_SIZE: faker.helpers.arrayElement([faker.word.sample(), undefined]), FONT_STYLE: faker.helpers.arrayElement([faker.word.sample(), undefined]), FONT_WEIGHT: faker.helpers.arrayElement([faker.word.sample(), undefined]), HEIGHT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), MANUAL_CREATE_TEXT_BOX: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), NOTE_TEXT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ORIGINAL_TEXT_BOX_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), PREFIX_INDEX: faker.helpers.arrayElement([faker.word.sample(), undefined]), ROTATE_DEGREE: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), TEXT: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_ALIGN: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_BOX_TYPE: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_COLOR: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_DECORATION: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_DECORATION_COLOR: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_UNDERLINE_OFFSET: faker.helpers.arrayElement([faker.word.sample(), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), VISION_BOX: faker.helpers.arrayElement([{ COMBINED_X: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), COMBINED_Y: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), DOMINANT_COLOR: faker.helpers.arrayElement([faker.word.sample(), undefined]), HEIGHT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), WIDTH: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse }, undefined]), WIDTH: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse })), undefined]), ...overrideResponse })), undefined]), OCR_DETECTED_TEXT_BOX_COUNT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ORIGINAL_LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), ORIGINAL_LOCALE_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ORIGINAL_LOCALE_ISO2: faker.helpers.arrayElement([faker.word.sample(), undefined]), ORIGINAL_LOCALE_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), OWNER: faker.helpers.arrayElement([faker.word.sample(), undefined]), PERMISSION: faker.helpers.arrayElement([{ CAN_IMPORT_EXCEL: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), CAN_PSE_IMPORTING: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), CAN_TRANSLATE: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), EXPORT_EXCEL: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), EXPORT_IMAGE: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), EXPORT_JSON: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), EXPORT_PSD: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), SHOW_DRAW_TEXT_BOX_BTN: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), SHOW_OCR_BTN: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), SHOW_TOGGLE_TEXT_BOX_BTN: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), SHOW_TOGGLE_VISION_BOX_BTN: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), SHOW_TRANSLATE_BTN: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), SHOW_TRANSLATE_ENGINE_BTN: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ...overrideResponse }, undefined]), STATUS: faker.helpers.arrayElement([faker.word.sample(), undefined]), TRANSLATED_TEXT_BOX_COUNT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), UPLOAD: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), VISION_FINISHED: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ...overrideResponse }, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getCheckNameExistResponseMock = (overrideResponse: any = {}): AppResponseCheckNameExistRes => ({ DATA: faker.helpers.arrayElement([{ LIST_CHAPTERS_NAME_EXIST: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), ...overrideResponse }, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getValidateChapterResponseMock = (overrideResponse: any = {}): AppResponseString => ({ DATA: faker.helpers.arrayElement([faker.word.sample(), undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getGetChapterDetailPSResponseMock = (overrideResponse: any = {}): AppResponseRedirectExportChapterInput => ({ DATA: faker.helpers.arrayElement([{ EXPORT_IMAGE_TYPE: faker.helpers.arrayElement([faker.word.sample(), undefined]), FROM_SITE: faker.helpers.arrayElement([faker.word.sample(), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IMAGES: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ CONFLICT_TEXT_BOX: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), HEIGHT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IS_CONFLICT_TEXTBOX: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_BOXES: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ BACKGROUND_COLOR: faker.helpers.arrayElement([faker.word.sample(), undefined]), BODY_HTML: faker.helpers.arrayElement([faker.word.sample(), undefined]), CAN_EDIT_BACKGROUND: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), COMBINED_X: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), COMBINED_Y: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), FEEDBACK: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), FONT_FAMILY: faker.helpers.arrayElement([faker.word.sample(), undefined]), FONT_SIZE: faker.helpers.arrayElement([faker.word.sample(), undefined]), FONT_STYLE: faker.helpers.arrayElement([faker.word.sample(), undefined]), FONT_WEIGHT: faker.helpers.arrayElement([faker.word.sample(), undefined]), HEIGHT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), IS_FEEDBACK: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), NOTE_TEXT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ORIGINAL_TEXT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ORIGINAL_TEXT_BOX_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), TEXT: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_ALIGN: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_BOX_TYPE: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_COLOR: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_DECORATION: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_DECORATION_COLOR: faker.helpers.arrayElement([faker.word.sample(), undefined]), TEXT_UNDERLINE_OFFSET: faker.helpers.arrayElement([faker.word.sample(), undefined]), VISION_BOX: faker.helpers.arrayElement([{ COMBINED_X: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), COMBINED_Y: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), DOMINANT_COLOR: faker.helpers.arrayElement([faker.word.sample(), undefined]), HEIGHT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), WIDTH: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse }, undefined]), WIDTH: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse })), undefined]), URL: faker.helpers.arrayElement([faker.word.sample(), undefined]), WIDTH: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse })), undefined]), NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), ORIGINAL_LOCALE: faker.helpers.arrayElement([faker.word.sample(), undefined]), TARGET_LOCALE: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse }, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getExportPsdResponseMock = (overrideResponse: any = {}): AppResponseExportQueueTaskRes => ({ DATA: faker.helpers.arrayElement([{ STATUS: faker.helpers.arrayElement([faker.helpers.arrayElement(['CREATED', 'PENDING', 'PROCESSING', 'FINISHED', 'CANCEL', 'ERROR', 'RETRYING'] as const), undefined]), TASK_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), URL: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse }, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getExportImageResponseMock = (overrideResponse: any = {}): AppResponseExportQueueTaskRes => ({ DATA: faker.helpers.arrayElement([{ STATUS: faker.helpers.arrayElement([faker.helpers.arrayElement(['CREATED', 'PENDING', 'PROCESSING', 'FINISHED', 'CANCEL', 'ERROR', 'RETRYING'] as const), undefined]), TASK_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), URL: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse }, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getExportExcelResponseMock = (overrideResponse: any = {}): AppResponseExportQueueTaskRes => ({ DATA: faker.helpers.arrayElement([{ STATUS: faker.helpers.arrayElement([faker.helpers.arrayElement(['CREATED', 'PENDING', 'PROCESSING', 'FINISHED', 'CANCEL', 'ERROR', 'RETRYING'] as const), undefined]), TASK_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), URL: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse }, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getSearchPsResponseMock = (overrideResponse: any = {}): AppResponseRes => ({ DATA: faker.helpers.arrayElement([{ ITEMS: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ CHAPTER_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), CHAPTER_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), COMIC_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), COMIC_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), CREATED_TIME: faker.helpers.arrayElement([faker.word.sample(), undefined]), NO: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ORIGINAL_TEXT_BOXES: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), TRANSLATE_TEX_BOX_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), TRANSLATE_TEX_BOXES_COUNT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), UPDATED_TIME: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })), undefined]), ...overrideResponse }, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getSearchChapterManagementResponseMock = (overrideResponse: any = {}): AppResponseSearchRes => ({ DATA: faker.helpers.arrayElement([{ CURRENT_PAGE: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ITEMS: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ GROUP_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), LOCALE_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), TOTAL_CHAPTERS: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), UPDATED_AT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })), undefined]), SIZE: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), TOTAL_PAGES: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), TOTAL_RESULT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse }, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getExportTrainingJSONResponseMock = (overrideResponse: any = {}): AppResponseExportTrainingResult => ({ DATA: faker.helpers.arrayElement([{ ITEMS: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ CHAPTER_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), CHAPTER_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), COMIC_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), IMAGES: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ HEIGHT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), URL: faker.helpers.arrayElement([faker.word.sample(), undefined]), VISION_BOXES: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ COMBINED_X: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), COMBINED_Y: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), HEIGHT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), TEXT: faker.helpers.arrayElement([faker.word.sample(), undefined]), WIDTH: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse })), undefined]), WIDTH: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse })), undefined]), LOCALE_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })), undefined]), PAGE: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), PER_PAGE: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), TOTAL_ITEMS: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), TOTAL_PAGES: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse }, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getGetExportUrlResponseMock = (overrideResponse: any = {}): AppResponseExportQueueTaskRes => ({ DATA: faker.helpers.arrayElement([{ STATUS: faker.helpers.arrayElement([faker.helpers.arrayElement(['CREATED', 'PENDING', 'PROCESSING', 'FINISHED', 'CANCEL', 'ERROR', 'RETRYING'] as const), undefined]), TASK_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), URL: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse }, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export const getDeleteChapterResponseMock = (overrideResponse: any = {}): AppResponseRes => ({ DATA: faker.helpers.arrayElement([{ ITEMS: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ CHAPTER_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), CHAPTER_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), COMIC_ID: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), COMIC_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), CREATED_TIME: faker.helpers.arrayElement([faker.word.sample(), undefined]), NO: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ORIGINAL_TEXT_BOXES: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), TRANSLATE_TEX_BOX_NAME: faker.helpers.arrayElement([faker.word.sample(), undefined]), TRANSLATE_TEX_BOXES_COUNT: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), UPDATED_TIME: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })), undefined]), ...overrideResponse }, undefined]), ERR_CODE: faker.helpers.arrayElement([faker.word.sample(), undefined]), REASON: faker.helpers.arrayElement([faker.word.sample(), undefined]), RESULT: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse })

export function getGetChapterMockHandler(overrideResponse?: AppResponseChapterDetailRes) {
  return http.get('*/api-v2/work/chapters/:id', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getGetChapterResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getUpdateChapterMockHandler(overrideResponse?: AppResponseChapterDetailRes) {
  return http.put('*/api-v2/work/chapters/:id', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getUpdateChapterResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getUpdateChapterStatusMockHandler(overrideResponse?: AppResponseChangeChapterStatusRes) {
  return http.put('*/api-v2/work/chapters/:id/change-status', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getUpdateChapterStatusResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getCreateChapterMockHandler(overrideResponse?: AppResponseChapterDetailRes) {
  return http.post('*/api-v2/work/chapters', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getCreateChapterResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getCreateTextBoxesMockHandler(overrideResponse?: AppResponseChapterDetailRes) {
  return http.post('*/api-v2/work/chapters/:id/text-boxes', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getCreateTextBoxesResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getImportExcelMockHandler(overrideResponse?: AppResponseChapterDetailRes) {
  return http.post('*/api-v2/work/chapters/:id/import-excel', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getImportExcelResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getCheckNameExistMockHandler(overrideResponse?: AppResponseCheckNameExistRes) {
  return http.post('*/api-v2/work/chapters/check-name-exist', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getCheckNameExistResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getValidateChapterMockHandler(overrideResponse?: AppResponseString) {
  return http.get('*/api-v2/work/chapters/:id/validate', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getValidateChapterResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getGetChapterDetailPSMockHandler(overrideResponse?: AppResponseRedirectExportChapterInput) {
  return http.get('*/api-v2/work/chapters/:id/ps', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getGetChapterDetailPSResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getExportPsdMockHandler(overrideResponse?: AppResponseExportQueueTaskRes) {
  return http.get('*/api-v2/work/chapters/:id/export-psd', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getExportPsdResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getExportImageMockHandler(overrideResponse?: AppResponseExportQueueTaskRes) {
  return http.get('*/api-v2/work/chapters/:id/export-image', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getExportImageResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getExportExcelMockHandler(overrideResponse?: AppResponseExportQueueTaskRes) {
  return http.get('*/api-v2/work/chapters/:id/export-excel', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getExportExcelResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getSearchPsMockHandler(overrideResponse?: AppResponseRes) {
  return http.get('*/api-v2/work/chapters/search-ps', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getSearchPsResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getSearchChapterManagementMockHandler(overrideResponse?: AppResponseSearchRes) {
  return http.get('*/api-v2/work/chapters/management', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getSearchChapterManagementResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getExportTrainingJSONMockHandler(overrideResponse?: AppResponseExportTrainingResult) {
  return http.get('*/api-v2/work/chapters/get-training-chapters', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getExportTrainingJSONResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getGetExportUrlMockHandler(overrideResponse?: AppResponseExportQueueTaskRes) {
  return http.get('*/api-v2/work/chapters/export-url', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getGetExportUrlResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}

export function getDeleteChapterMockHandler(overrideResponse?: AppResponseRes) {
  return http.delete('*/api-v2/work/chapters/', async () => {
    await delay(1000)
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined ? overrideResponse : getDeleteChapterResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })
  })
}
export function getChapterV2ControllerMock() {
  return [
    getGetChapterMockHandler(),
    getUpdateChapterMockHandler(),
    getUpdateChapterStatusMockHandler(),
    getCreateChapterMockHandler(),
    getCreateTextBoxesMockHandler(),
    getImportExcelMockHandler(),
    getCheckNameExistMockHandler(),
    getValidateChapterMockHandler(),
    getGetChapterDetailPSMockHandler(),
    getExportPsdMockHandler(),
    getExportImageMockHandler(),
    getExportExcelMockHandler(),
    getSearchPsMockHandler(),
    getSearchChapterManagementMockHandler(),
    getExportTrainingJSONMockHandler(),
    getGetExportUrlMockHandler(),
    getDeleteChapterMockHandler(),
  ]
}
